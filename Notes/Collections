
###  Arrays
arr.length
Arrays.sort(arr)
Arrays.equals(a,b)
Arrays.toString(arr)   // arr to string
Arrays.fill(arr, value)
char[] charArr = str.toCharArray(); 

// to return an array
return new int[] {a1,a2,a3};


### ArrayList<T> list = new ArrayList<>(); 
### LinkedList<T> list = new LinkedList<>();  

Collections.sort(list)
list.add(data)            -> add at last
list.addFirst()
list.add(index,data)
list.set(index, data)    -> replace by index
list.get(index)          -> return data
list.indexOf(data)       -> return index
list.remove()         -> removes first
list.remove(index) 
list.removeLast()
list.contains(data)    -> boolean
list.isEmpty()          -> boolean
list.size()
System.out.print(list)


### iterator 
Iterator it = name.iterator();
while(it.hasNext()){           //  .hasNext() - set has values already
System.out.print(it.next());   // .next() - goes to next value
}

### Stack<T> st = new Stack<>();
st.push(data)
st.peek()
st.pop()
st.empty()
st.size()
System.out.print(st)

	
### HashSet<T> set = new HashSet<>();   // Unordered and has unique values
set.size()
set.add(value)
set.remove(value)
set.contains(value) --> true/false
set.isEmpty() --> true/false
System.out.print(set)


### HashMap<String, Integer> map = new HashMap<>();  // Unordered and has unique keys
map.size()
map.put()
map.get()
map.remove()
map.containsKey()
System.out.print(map)

### Iteration (1)
for( Map.Entry<String, Integer> e : map.entrySet()) {
    System.out.println(e.getKey());
    System.out.println(e.getValue());
}
 
###  Iteration (2)
Set<String> keys = map.keySet();
for(String key : keys) {
  System.out.println(key+ " " + map.get(key));
}



